# -*- mode:shell-script -*-

# -----------------------------------------------------------------------------
# Aliases
# -----------------------------------------------------------------------------

alias df='df -kh'
alias du='du -kh'
alias j=jobs
alias l=ls
alias ll='ls -l'
alias la='ls -Fa'
alias lsd='ls -ld *(-/DN)'  # List only directories and symbolic
alias lsa='ls -ld .*'       # List only file beginning with "."
alias dir='ls -algF'
alias x=exit
alias m=more
alias r=resize
alias 'cd..'='cd ..'
alias dc=cd
alias sl=ls
alias e=emacs
alias mroe=more
alias k9='kill -9'
alias mkdir='nocorrect mkdir'    # no spelling correction on mkdir
alias cp='nocorrect cp -p -i'
alias mv='nocorrect mv -i'

# Global aliases -- These do not have to be
# at the beginning of the command line.
alias -g M='|more'
alias -g H='|head'
alias -g T='|tail'


# -----------------------------------------------------------------------------
# Archive Management
# -----------------------------------------------------------------------------

zless() { zcat $* | more }              # for reading gzipped files
zmore() { zcat $* | more }
unsh()  { perl -ne '/^#\!/&&$x++;$x&&print;' $* | /bin/sh }
tarup() { tar zcvfp $1.tgz $1 }
untar() { tar zxvfp $* }
ltar()  { tar ztvf $* | more }

unZ()
{
    for file in $*; do
        mv $file $file.Z
        uncompress $file.Z
    done
}

# -----------------------------------------------------------------------------
# git utils
# -----------------------------------------------------------------------------

gpull()
{
    pushd
    for dir in $(find $1 -type d -mindepth 1 -maxdepth 1); do
        echo "Updating $dir..."
        cd $dir
        git pull
    done
    popd
}

# -----------------------------------------------------------------------------
# Version Managers
# -----------------------------------------------------------------------------

[[ -s "$HOME/.pythonbrew/etc/bashrc" ]] && source "$HOME/.pythonbrew/etc/bashrc"
[[ -s "$HOME/.pythonz/etc/bashrc" ]] && source "$HOME/.pythonz/etc/bashrc"
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"
[[ -s "$HOME/.gvm/scripts/gvm" ]] && source "$HOME/.gvm/scripts/gvm"
[[ -s "$HOME/.nvm/nvm.sh" ]] && source "$HOME/.nvm/nvm.sh"

# -----------------------------------------------------------------------------
# Docker
# -----------------------------------------------------------------------------

if [[ -z `which docker-machine` ]]; then
    eval $(docker-machine env $(docker-machine active))
fi

docker-ip() {
    docker-machine ip $(docker-machine active) 2> /dev/null
}

docker-enter() {
    set -e

    # Check for nsenter. If not found, install it
    docker-machine ssh $(docker-machine active) '[ -f /var/lib/boot2docker/nsenter ] || docker run --rm -v /var/lib/boot2docker/:/target jpetazzo/nsenter'

    # Use bash if no command is specified
    args=$@
    if [[ $# = 1 ]]; then
        args+=(/bin/bash)
    fi

    docker-machine ssh $(docker-machine active) -t sudo /var/lib/boot2docker/docker-enter "${args[@]}"
}

docker-clean-containers() {
    docker rm $(docker ps -a -q)
}

docker-clean-images() {
    docker rmi $(docker images | grep "^<none>" | awk '{print $3}')
}

docker-build() {
    dir=$(pwd)
    tag=$(basename $dir)
    docker build -t $tag .
}
alias db=docker-build

docker-run-interactive() {
    dir=$(pwd)
    tag=$(basename $dir)
    docker run -t -i \
           -v /var/run/docker.sock:/var/run/docker.sock \
           -v $HOME:/Users/alpern \
           $tag
}
alias di=docker-run-interactive
