# -*- mode:shell-script -*-

autoload -U colors && colors
autoload -Uz vcs_info

prompt_standard="%n@%{$fg[cyan]%}%m%{$reset_color%}:%t ? "
prompt_standard_no_color='%n@%B%m%b:%t ? '

rprompt_standard="%{$fg[cyan]%}%~%{$reset_color%}:(%l)"
rprompt_standard_no_color="%~:(%l)"

# http://briancarper.net/blog/570/git-info-in-your-zsh-prompt
# http://stevelosh.com/blog/2010/02/my-extravagant-zsh-prompt/
# https://github.com/bryanl/zshkit
# https://github.com/olivierverdier/zsh-git-prompt

function prompt_char 
{
    git branch >/dev/null 2>/dev/null && echo '±' && return
    echo '○'
}

zstyle ':vcs_info:*' stagedstr '%F{28}●'
zstyle ':vcs_info:*' unstagedstr '%F{11}●'
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{1}:%F{11}%r'
zstyle ':vcs_info:*' enable git

precmd () {
    if [[ -z $(git ls-files --other --exclude-standard 2> /dev/null) ]] {
        zstyle ':vcs_info:*' formats ' [%F{green}%b%c%u%F{blue}]'
    } else {
        zstyle ':vcs_info:*' formats ' [%F{green}%b%c%u%F{red}●%F{blue}]'
    }
 
    vcs_info
}
 
#setopt prompt_subst
prompt_git='%F{cyan}%n@%m %c${vcs_info_msg_0_}%F{cyan} %(?/%F{green}/%F{red})%% %{$reset_color%}'

function select_prompt
{
    git branch >/dev/null 2>/dev/null && echo $promp_git && return
    echo $prompt_standard
}

# I'd like to use the git prompt only when I'm in a git repo
PROMPT=$prompt_standard
RPROMPT=$rprompt_standard
